#!/usr/bin/env python
import json
from os import path

import websocket


class GPMDP:
    NAME = "GPMDP Python Client"
    config_location = path.expanduser("~/.config/gpmdp_api")

    def __init__(self):
        ws = websocket.WebSocket()
        ws.connect("ws://localhost:5672")
        ws.timeout = 1
        self.ws = ws
        self._initial_connect = True

        code = self.get_saved_code()

        if not code:
            code = self.authenticate()

        self.connect(code)

    def get_saved_code(self):
        if path.exists(self.config_location):
            with open(self.config_location) as conf:
                return conf.read()

    def save_code(self, code):
        with open(self.config_location, "w") as conf:
            conf.write(code)

    def connect(self, code=None):
        connect = {
            "namespace": "connect",
            "method": "connect",
            "arguments": ["Song Liker"],
        }

        if code is not None:
            connect["arguments"].append(str(code))

        self.ws.send(json.dumps(connect))

        # only fetch the initial responses the first time
        # we connect
        if self._initial_connect:
            self._get_initial_responses()
            self._initial_connect = False

        # we only get a response while authenticating
        if code is None or len(code) == 4:
            return self.get_response("connect")["payload"]

    def authenticate(self):
        self.connect()
        code = input("Please input code: ")
        res = self.connect(code)
        self.save_code(res)
        return res

    def _get_initial_responses(self):
        # upon connection, we get messages for lots of things
        # the last one being for the library channel
        self.get_response("library")

    def get_responses(self):
        for res in self.ws:
            yield res

    def get_response(self, channel):
        for res in self.get_responses():
            if '"channel":"{0}"'.format(channel) in res:
                return json.loads(res)

    def like_current_song(self):
        thumbs_up = {"namespace": "rating", "method": "setRating", "arguments": [5]}

        self.ws.send(json.dumps(thumbs_up))
        return self.get_response("rating")["payload"]


if __name__ == "__main__":
    g = GPMDP()
    g.like_current_song()
